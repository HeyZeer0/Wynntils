plugins {
	id "java"
	id "idea"
	id "maven-publish"
	id "net.minecraftforge.gradle" version "5.1.+"
	id "com.github.johnrengelman.shadow" version "7.1.0"
}

def versionObj = new Version(major: 1, minor: 10, revision: 5)

version = versionObj.toString()
group = mod_base_package
archivesBaseName = mod_id

java.toolchain.languageVersion = JavaLanguageVersion.of(8)
compileJava.options.encoding = "UTF-8"

minecraft {
    mappings channel: mappings_channel, version: mappings_version

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'


        }

        if (project.hasProperty("minecraftEmailUsername") || project.hasProperty("minecraftPassword")) {
            eclipseUnsuppliedClient {
                parent runs.client

                args '--username=${string_prompt:Minecraft Email/Username}'
                args '--password=${password_prompt:Minecraft Password}'
            }

            intellijUnsuppliedClient {
                parent runs.client

                // If someone knows a prompt variable that actually hides the password when entering it for intellij then put it after "--password="
                args '--username=$Prompt$'
                args '--password=$Prompt$'
            }

            if (project.hasProperty('minecraftEmailUsername') && project.hasProperty('minecraftPassword')) {
                suppliedClient {
                    parent runs.client

                    args "--username=" + minecraftEmailUsername
                    args "--password=" + minecraftPassword
                }
            } else {
                eclipseSuppliedClient {
                    parent runs.client

                    if (project.hasProperty("minecraftEmailUsername")) {
                        args "--username=" + minecraftEmailUsername
                    } else {
                        args '--username=${string_prompt:Minecraft Email/Username}'
                    }

                    if (project.hasProperty("minecraftPassword")) {
                        args "--password=" + minecraftPassword
                    } else {
                        args '--password=${password_prompt:Minecraft Password}'
                    }
                }

                intellijSuppliedClient {
                    parent runs.client

                    if (project.hasProperty("minecraftEmailUsername")) {
                        args "--username=" + minecraftEmailUsername
                    } else {
                        args '--username=$Prompt$'
                    }

                    if (project.hasProperty("minecraftPassword")) {
                        args "--password=" + minecraftPassword
                    } else {
                        args '--password=$Prompt$'
                    }
                }
            }
        } else {
            eclipseClient {
                parent runs.client

                args '--username=${string_prompt:Minecraft Email/Username}'
                args '--password=${password_prompt:Minecraft Password}'
            }

            intellijClient {
                parent runs.client

                // If someone knows a prompt variable that actually hides the password when entering it for intellij then put it after "--password="
                args '--username=$Prompt$'
                args '--password=$Prompt$'
            }
        }
    }
}

// allow local forge version override
if (!project.hasProperty("wynntilsForgeVersion")) {
    ext.wynntilsForgeVersion=forge_version
}

configurations {
    include
    implementation.extendsFrom(include)
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${wynntilsForgeVersion}"

    include "javazoom:jlayer:1.0.1"
}

jar {
	enabled = false
}

shadowJar {
	archiveFileName = jar.archiveFileName
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	configurations = [project.configurations.include]
}

processResources {
    inputs.property "description", "The best Wynncraft mod you'll probably find!\nBuild " + versionObj.getBuild()
    inputs.property "version", versionObj.toVersion()

    filesMatching("mcmod.info") {
        expand "version": versionObj.toVersion(), "description": "The best Wynncraft mod you'll probably find!\nBuild " + versionObj.getBuild()
    }
}

reobf {
    shadowJar {}
}

class Version {
    int major, minor, revision

    static String getBuild() {
        System.getenv("BUILD_NUMBER") ?: System.getProperty("BUILD_NUMBER") ?: "DEV"
    }

    String toVersion() {
        "${major}.${minor}.${revision}"
    }

    String toString() {
        "${major}.${minor}.${revision}_$build-MC1.12.2"
    }
}

jar.dependsOn("shadowJar")